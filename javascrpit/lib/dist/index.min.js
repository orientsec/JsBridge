!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.JsBridge=r():e.JsBridge=r()}(self,(()=>(()=>{"use strict";var e={};class r{constructor(e,r,n){this.type=e,this.data=r,this.callbackId=n}}class n{constructor(){this.receiveMessageQueue=[],this.messageHandlers=new Map,this.responseCallbacks=new Map,this.uniqueId=1}static getInstance(){if(!window.jsBridge){console.log("JsBridge: new Javascript bridge."),window.jsBridge=new n;const e=new Event("WebViewJavascriptBridgeReady");window.dispatchEvent(e)}return window.jsBridge}init(e){var r;if(this.defaultHandler)throw new Error("WebViewJavascriptBridge.init called twice.");this.defaultHandler=e;const n=null!==(r=this.receiveMessageQueue)&&void 0!==r?r:[];this.receiveMessageQueue=void 0;for(let e=0;e<n.length;e++){const r=n[e];this.handleNativeMessage(r.type,r.data,r.callbackId)}}registerHandler(e,r){this.messageHandlers.set(e,r)}callHandler(e,r,n){let s="";if(n&&(s="cb_"+this.uniqueId+++"_"+(new Date).getTime(),this.responseCallbacks.set(s,n)),console.info(`JsBridge: call native handler:${e}, callbackId:${s}, data:${r}.`),null==window.nativeBridge)return console.error("JsBridge: Native bridge is undefined"),void(null==n||n.onError(-1,"Native bridge is undefined."));try{window.nativeBridge.request(e,JSON.stringify(r),s)}catch(e){console.error("JsBridge: excute native JavascriptInterface error.",e),this.responseCallbacks.delete(s),null==n||n.onError(-2,"Fail to execute native JavascriptInterface.")}}response(e,r,n,s){console.info(`JsBridge: receive native response, callbackId:${s}, code:${e}, info:${r}, data:${n}.`),setTimeout((()=>{const i=this.responseCallbacks.get(s);i?(this.responseCallbacks.delete(s),0==e?i.onResult(n):i.onError(e,r)):console.warn(`JsBridge: callback:${s} not found.`)}))}handleNativeMessage(e,r,n){setTimeout((()=>{var s;let i;i=null==n||""===n.trim()?this.emptyCallback(e):this.nativeCallback(e,n);const t=null!==(s=this.messageHandlers.get(e))&&void 0!==s?s:this.defaultHandler;if(null==t)return console.warn(`JsBridge: none js handler for [${e}].`),void i.onError(-1,`Handler:${e} not found.`);try{console.info(`JsBridge: invoke js handler:${e}, data:${r}.`),t.handle(r,i)}catch(r){i.onError(-2,`Uncaught exception in js handler:${e}.`),console.error(`JsBridge: invoke js handler:${e} error.`,r)}}))}request(e,n,s){if(console.info(`JsBridge: receive native request:${e}, callbackId:${s}, data:${n}.`),this.receiveMessageQueue){const i=new r(e,n,s);this.receiveMessageQueue.push(i)}else this.handleNativeMessage(e,n,s)}emptyCallback(e){const r=r=>{console.warn(`JsBridge: none callback for [${e}], result:${r}.`)};return r.onError=(r,n)=>{console.warn(`JsBridge: none callback for [${e}], onError:[${r}, ${n}].`)},r.onResult=r=>{console.warn(`JsBridge: none callback for [${e}], onResult:${r}.`)},r}nativeCallback(e,r){const n=(n,s,i)=>{if(null!=window.nativeBridge)if(null!=window.nativeBridge.response)try{window.nativeBridge.response(n,s,JSON.stringify(i),r)}catch(r){console.error(`JsBridge: ${e} response to native error.`,r)}else console.error("JsBridge: native bridge.response() is undefined.");else console.error("JsBridge: native bridge is undefined.")},s=e=>{n(0,"OK",e)};return s.onError=(e,r)=>{n(e,r)},s.onResult=e=>{n(0,"OK",e)},s}}class s{constructor(){this.jsBridge=n.getInstance()}static getInstance(){if(null==window.WebViewJavascriptBridge){window.WebViewJavascriptBridge=new s;const e=new Event("WebViewJavascriptBridgeReady");e.bridge=window.WebViewJavascriptBridge,document.dispatchEvent(e)}return window.WebViewJavascriptBridge}init(e){this.jsBridge.init({handle(r,n){e(r,n)}})}registerHandler(e,r){this.jsBridge.registerHandler(e,{handle(e,n){r(e,n)}})}callHandler(e,r,n){n?this.jsBridge.callHandler(e,r,{onError:(e,r)=>{n(r)},onResult:e=>{n(e)}}):this.jsBridge.callHandler(e,r)}}return s.getInstance(),e=e.default})()));