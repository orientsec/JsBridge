!function(e,s){"object"==typeof exports&&"object"==typeof module?module.exports=s():"function"==typeof define&&define.amd?define([],s):"object"==typeof exports?exports.JsBridge=s():e.JsBridge=s()}(self,(()=>(()=>{"use strict";var e={};class s{constructor(e,s,t){this.type="request",this.name=e,this.data=s,this.callbackId=t}}class t{constructor(e,s,t,a){this.type="response",this.code=e,this.data=t,this.callbackId=a,this.info=s}}class a{constructor(){this.receiveMessageQueue=[],this.messageHandlers=new Map,this.responseCallbacks=new Map,this.uniqueId=1,window.bridgePort&&(window.bridgePort.onmessage=e=>{this.onMessage(e.data)}),this.postMessage("JsBridge-Channel-Init")}static getInstance(){if(!window.jsBridge){console.log("JsBridge: new Javascript bridge."),window.jsBridge=new a;const e=new Event("WebViewJavascriptBridgeReady");window.dispatchEvent(e)}return window.jsBridge}postMessage(e,s){try{window.bridgePort?window.bridgePort.postMessage(e):window.bridgeChannel?window.bridgeChannel.onMessage(e):console.error("JsBridge: native bridge channel is undefined.")}catch(t){s&&s(t),console.error(`JsBridge: post message to native error. data: ${e}`,t)}}init(e){var s;if(this.defaultHandler)throw new Error("WebViewJavascriptBridge.init called twice.");this.defaultHandler=e;const t=null!==(s=this.receiveMessageQueue)&&void 0!==s?s:[];this.receiveMessageQueue=void 0;for(let e=0;e<t.length;e++){const s=t[e];this.handleNativeMessage(s.name,s.data,s.callbackId)}}registerHandler(e,s){this.messageHandlers.set(e,s)}callHandler(e,t,a){let n="";a&&(n="cb_"+this.uniqueId+++"_"+(new Date).getTime(),this.responseCallbacks.set(n,a)),console.info(`JsBridge: call native handler:${e}, callbackId:${n}, data:${t}.`);let r=new s(e,JSON.stringify(t),n),i=JSON.stringify(r);this.postMessage(i,(()=>{this.responseCallbacks.delete(n),null==a||a.onError(-2,"Fail to execute native JavascriptInterface.")}))}handleNativeMessage(e,s,t){setTimeout((()=>{var a;let n;n=null==t||""===t.trim()?this.emptyCallback(e):this.nativeCallback(t);const r=null!==(a=this.messageHandlers.get(e))&&void 0!==a?a:this.defaultHandler;if(null==r)return console.warn(`JsBridge: none js handler for [${e}].`),void n.onError(-1,`Handler:${e} not found.`);try{console.info(`JsBridge: invoke js handler:${e}, data:${s}.`),r.handle(s,n)}catch(s){n.onError(-2,`Uncaught exception in js handler:${e}.`),console.error(`JsBridge: invoke js handler:${e} error.`,s)}}))}onMessage(e){let s=JSON.parse(e),t=s.type;if("request"==t){let e=s;this.validateParams(e,"name","data","callbackId")?this.onRequest(e.name,e.data,e.callbackId):console.warn(`JsBridge: required request param lost, ${e}`)}else if("response"==t){let e=s;this.validateParams(e,"code","info","data","callbackId")?this.onResponse(e.code,e.info,e.data,e.callbackId):console.warn(`JsBridge: required response param lost, ${e}`)}else console.warn(`JsBridge: receive onKnown message: ${e}`)}validateParams(e,...s){return s.forEach((s=>{if(void 0===e[s])return!1})),!0}onRequest(e,t,a){if(console.info(`JsBridge: receive native request:${e}, callbackId:${a}, data:${t}.`),this.receiveMessageQueue){const n=new s(e,t,a);this.receiveMessageQueue.push(n)}else this.handleNativeMessage(e,t,a)}onResponse(e,s,t,a){console.info(`JsBridge: receive native response, callbackId:${a}, code:${e}, info:${s}, data:${t}.`),setTimeout((()=>{const n=this.responseCallbacks.get(a);n?(this.responseCallbacks.delete(a),0==e?n.onResult(t):n.onError(e,s)):console.warn(`JsBridge: callback:${a} not found.`)}))}emptyCallback(e){const s=s=>{console.warn(`JsBridge: none callback for [${e}], result:${s}.`)};return s.onError=(s,t)=>{console.warn(`JsBridge: none callback for [${e}], onError:[${s}, ${t}].`)},s.onResult=s=>{console.warn(`JsBridge: none callback for [${e}], onResult:${s}.`)},s}nativeCallback(e){const s=(s,a,n)=>{let r=new t(s,a,JSON.stringify(n),e),i=JSON.stringify(r);this.postMessage(i)},a=e=>{s(0,"OK",e)};return a.onError=(e,t)=>{s(e,t)},a.onResult=e=>{s(0,"OK",e)},a}}class n{constructor(){this.jsBridge=a.getInstance()}static getInstance(){if(null==window.WebViewJavascriptBridge){window.WebViewJavascriptBridge=new n;const e=new Event("WebViewJavascriptBridgeReady");e.bridge=window.WebViewJavascriptBridge,document.dispatchEvent(e)}return window.WebViewJavascriptBridge}init(e){this.jsBridge.init({handle(s,t){e(s,t)}})}registerHandler(e,s){this.jsBridge.registerHandler(e,{handle(e,t){s(e,t)}})}callHandler(e,s,t){t?this.jsBridge.callHandler(e,s,{onError:(e,s)=>{t(s)},onResult:e=>{t(e)}}):this.jsBridge.callHandler(e,s)}}return n.getInstance(),e=e.default})()));